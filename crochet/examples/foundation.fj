data Bool =
    | True
    | False
    ;;

data List 'a =
    | Nil
    | Cons 'a (List 'a)
    ;;

one :: Int

not :: Bool -> Bool
not value =
    case value of
    | False -> True
    | True -> False ;;

or :: Bool -> Bool -> Bool
or a b =
    case a of
    | True -> True
    | False -> b ;;

and :: Bool -> Bool -> Bool
and a b =
    case a of
    | True -> b
    | False -> False ;;

head :: List 'a -> 'a
head xs =
    case xs of
    | Cons y ys -> y ;;