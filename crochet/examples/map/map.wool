nil = CON(Nil)
one = CON(Integer 1)
two = CON(Integer 2)
three = CON(Integer 3)

list1 = CON(Cons one nil)
list2 = CON(Cons two list1)
list3 = CON(Cons three list2)

mapped = THUNK(map plusOne list3)
main = THUNK(last mapped)

map = FUN(f xs ->
    case xs of {
        Nil -> nil;
        Cons h t ->
            let fh = THUNK(f h) in
            let ft = THUNK(map f t) in
            let result = CON(Cons fh ft) in
                result
    }
)

plusOne = FUN(x ->
    case x of {
        Integer i -> case +# i 1 of {
            y ->
                let result = CON(Integer y)
                in result
        }
    }
)

last = FUN(xs ->
    case xs of {
        Cons h t -> case t of {
            Nil -> h;
            Cons h2 t2 -> last t
        }
    }
)
